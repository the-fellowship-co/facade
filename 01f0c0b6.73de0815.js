(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{103:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return s}));var o=t(2),r=t(6),a=(t(0),t(141)),c={id:"communicating_between_blocks",title:"Communicating between blocks",sidebar_label:"Communicating between blocks"},i={id:"bylding_backends/communicating_between_blocks",isDocsHomePage:!1,title:"Communicating between blocks",description:"Synchronous Communication",source:"@site/docs/bylding_backends/communicating_between_block.md",permalink:"/docs/bylding_backends/communicating_between_blocks",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/bylding_backends/communicating_between_block.md",sidebar_label:"Communicating between blocks",sidebar:"someSidebar",previous:{title:"Architecting with blocks",permalink:"/docs/bylding_backends/architecting_with_blocks"},next:{title:"Expose your blocks",permalink:"/docs/bylding_backends/expose_your_blocks"}},l=[{value:"Synchronous Communication",id:"synchronous-communication",children:[]},{value:"Asynchronous Communication",id:"asynchronous-communication",children:[]}],b={rightToc:l};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"synchronous-communication"},"Synchronous Communication"),Object(a.b)("p",null,"Blocks could access the marked up interface methods from the another block in\na synchronous manner. In below case ",Object(a.b)("inlineCode",{parentName:"p"},"Stock")," model in ",Object(a.b)("inlineCode",{parentName:"p"},"inventory")," block exposes\n",Object(a.b)("inlineCode",{parentName:"p"},"get"),", ",Object(a.b)("inlineCode",{parentName:"p"},"update")," and ",Object(a.b)("inlineCode",{parentName:"p"},"available?")," method."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Stock < Byld::Model\n  expose only: [:get, :update]\n\n  inf(ID) {Bool}\n  def self.available?(product_id)\n    stock = Stock.find(product_id: id)\n    stock.qty > 0\n  end\n\nend\n")),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"byld connect [block-name]")," to enable sync communication between blocks."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld connect inventory\n")),Object(a.b)("p",null,"After this you should be able to call all the exposed methods (",Object(a.b)("inlineCode",{parentName:"p"},":get"),", ",Object(a.b)("inlineCode",{parentName:"p"},":update"),", ",Object(a.b)("inlineCode",{parentName:"p"},":available?"),") from ",Object(a.b)("inlineCode",{parentName:"p"},"Stock")," in another block using the ",Object(a.b)("inlineCode",{parentName:"p"},"[Model]Service.client"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"StockService.client.available?(productId)\n")),Object(a.b)("h3",{id:"asynchronous-communication"},"Asynchronous Communication"),Object(a.b)("p",null,"Mark any model as publisher using the ",Object(a.b)("inlineCode",{parentName:"p"},"publisher on: [channel_name]")," markup.\nBy default model\u2019s creation, update and deletion events are published when the\nmodel is marked. Use ",Object(a.b)("inlineCode",{parentName:"p"},"publish(:event_name, model)"),"  to publish custom events\non the channel."),Object(a.b)("h4",{id:"publisher"},"Publisher"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"publish(:event_name)")," to send a message to multiples blocks using our\npub/sub system. By default, ",Object(a.b)("inlineCode",{parentName:"p"},":order_created"),", ",Object(a.b)("inlineCode",{parentName:"p"},":order_updated")," and\n",Object(a.b)("inlineCode",{parentName:"p"},":order_destroyed")," events will be published."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Order < Byld::Model\n  publisher on: :order_events\n\n  def place!\n    ...\n    publish(:order_placed)\n  end\nend\n")),Object(a.b)("h4",{id:"subscriber"},"Subscriber"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"subscriber")," markup and name the method this way ",Object(a.b)("inlineCode",{parentName:"p"},"handle_[channel_name]"),"\nto subscribe events from a particular channel. Event object passed to the\nsubscriber method contains ",Object(a.b)("inlineCode",{parentName:"p"},"type")," and ",Object(a.b)("inlineCode",{parentName:"p"},"source_id")," of the model publishing it."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Stock < Byld::Model\n  ...\n\n  subscriber\n  def self.handle_order_events(event)\n    case event.type\n    when :order_placed\n      order = OrderService.client.get(event.source_id)\n      order.lineitem.each |item|\n         stock = Stock.find(product_id: item.product_id)\n         stock.quantity -= item.quantity\n         stock.save\n      end\n    ...\n  end\nend\n")))}s.isMDXComponent=!0},141:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),s=function(e){var n=r.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),d=s(t),p=o,m=d["".concat(c,".").concat(p)]||d[p]||u[p]||a;return t?r.a.createElement(m,i(i({ref:n},b),{},{components:t})):r.a.createElement(m,i({ref:n},b))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var b=2;b<a;b++)c[b]=t[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);