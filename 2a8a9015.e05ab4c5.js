(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{148:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return l}));var r=t(2),a=(t(0),t(177));const o={id:"working_with_edges",title:"Working with edges",sidebar_label:"Working with edges"},i={id:"bylding_backends/working_with_edges",title:"Working with edges",description:"Gate",source:"@site/docs/bylding_backends/working_with_edges.md",permalink:"/docs/bylding_backends/working_with_edges",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/bylding_backends/working_with_edges.md",sidebar_label:"Working with edges",sidebar:"someSidebar",previous:{title:"Communicating between blocks",permalink:"/docs/bylding_backends/communicating_between_blocks"},next:{title:"Deploying and testing gate",permalink:"/docs/bylding_backends/deploying_and_testing_gate"}},d=[{value:"Gate",id:"gate",children:[{value:"Structure of a gate",id:"structure-of-a-gate",children:[]}]},{value:"Edge",id:"edge",children:[{value:"Creating edges",id:"creating-edges",children:[]},{value:"Extending models",id:"extending-models",children:[]}]}],c={rightToc:d};function l({components:e,...n}){return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"gate"},"Gate"),Object(a.b)("p",null,"Gate is a unified GraphQL based gateway to power different frontends like web, mobile and desktop. GraphQL eliminates the need for having a separate backend for each frontend. GraphQL let's you customize your response by returning only the data you ask."),Object(a.b)("p",null,"You can learn more about GraphQL in ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://graphql.org/"}),"GraphQL guide"),"."),Object(a.b)("h3",{id:"structure-of-a-gate"},"Structure of a gate"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"gate/\n\u251c\u2500\u2500 Gemfile\n\u2514\u2500\u2500 edges\n    \u2514\u2500\u2500 user_edge.rb\n    \u2514\u2500\u2500 stock_edge.rb\n    \u2514\u2500\u2500 order_edge.rb\n    \u2514\u2500\u2500 payment_edge.rb\n    \u2514\u2500\u2500 shipping_edge.rb\n")),Object(a.b)("h2",{id:"edge"},"Edge"),Object(a.b)("p",null,"Gate has a collection of edges. Edge is a layer between your frontends and blocks. It can be used to create powerful endpoints aggregating multiple interface methods from different blocks. For example, to power the order summary page we need to aggregate ",Object(a.b)("inlineCode",{parentName:"p"},"get_order")," from order block, ",Object(a.b)("inlineCode",{parentName:"p"},"get_payment")," from payment block and ",Object(a.b)("inlineCode",{parentName:"p"},"status")," from shipping block based on ",Object(a.b)("inlineCode",{parentName:"p"},"order_id"),". Our ",Object(a.b)("inlineCode",{parentName:"p"},"extension")," markup  simplifies aggregations further by eliminating a need to write a separate method for each complex endpoint."),Object(a.b)("h3",{id:"creating-edges"},"Creating edges"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"byld gate expose [block-name]")," to generate edges for each ",Object(a.b)("inlineCode",{parentName:"p"},"Byld::Model")," in the block. You could add additional query and mutations using the interface markup\n",Object(a.b)("inlineCode",{parentName:"p"},"inf(RequestType) {ReturnType}")," over it. Use ",Object(a.b)("inlineCode",{parentName:"p"},"!")," to end the methods to mark them as mutations."),Object(a.b)("p",null,"You can also use ",Object(a.b)("inlineCode",{parentName:"p"},"Byld::Edge")," to create custom egdes and add your own methods to aggregate different interface methods across blocks."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class OrderEdge < Byld::Edge\n  include Orders\n\n  inf(ID) {Order}\n  def get_order(id)\n    Order.client.get(id)\n  end\n\n  inf(CreateOrderReq) {Order}\n  def create_order!(req)\n    Order.client.create!(req)\n  end\n\n  inf(UpdateOrderReq) {Order}\n  def update_order!(req)\n    Order.client.update!(req)\n  end\n\n  inf(ID) {Order}\n  def delete_order!(id)\n    Order.client.delete!(id)\n  end\nend\n")),Object(a.b)("h3",{id:"extending-models"},"Extending models"),Object(a.b)("p",null,"Use extension markup ",Object(a.b)("inlineCode",{parentName:"p"},"extension [ReturnType]")," to aggregate models across different blocks, doing that would include the extension model as part of the parent model. For instance ",Object(a.b)("inlineCode",{parentName:"p"},"extension User")," allows you to get customer model as part of order model. Now, you can get any customer fields in response along with the order."),Object(a.b)("p",null,"Below ",Object(a.b)("inlineCode",{parentName:"p"},"OrderEdge")," is extended with ",Object(a.b)("inlineCode",{parentName:"p"},"User"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Payment"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Shipping")," to power the order summary page."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class OrderEdge < Byld::Edge\n  include Order\n  include Identity\n  ...\n\n  extension User\n  def customer(order)\n    User.client.get(order.user_id)\n  end\n\n  extension Payment\n  def payment(order)\n    Payment.client.get(order.payment_id)\n  end\n\n  extension Shipping\n  def delivery(order)\n    Shipping.client.get(order.shipping_id)\n  end\n\nend\n")),Object(a.b)("p",null,"Now to build the order summary page, the following GraphQL query can be fired. Similarly, multiple complex UIs can be powered without creating a separate methods."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  getOrder(id: 1) {\n    id\n    totalPrice\n    lineItems {\n      qty\n      totalPrice\n        product {\n          title\n        }\n      }\n      customer {\n        firstName\n        address {\n          street\n          city\n        }\n      }\n      payment {\n        status\n      }\n      delivery {\n        status\n        eta\n        location         \n      }\n  }\n}\n")))}l.isMDXComponent=!0},177:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return g}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),s=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d({},n,{},e)),t},p=function(e){var n=s(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(t),u=r,g=p["".concat(i,".").concat(u)]||p[u]||b[u]||o;return t?a.a.createElement(g,d({ref:n},l,{components:t})):a.a.createElement(g,d({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);