(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{139:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var o=t(2),a=t(9),r=(t(0),t(183)),c={id:"communicating_between_blocks",title:"Communicating between blocks",sidebar_label:"Communicating between blocks"},i={id:"bylding_backends/communicating_between_blocks",isDocsHomePage:!1,title:"Communicating between blocks",description:"Communication between blocks is made very simple compared to traditional backends. Synchronous requests to other blocks is a simple function call. For asynchronous requests, you can send and receive messages using the in built messaing system without any additional setup.",source:"@site/docs/bylding_backends/communicating_between_block.md",permalink:"/docs/bylding_backends/communicating_between_blocks",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/bylding_backends/communicating_between_block.md",sidebar_label:"Communicating between blocks",sidebar:"someSidebar",previous:{title:"Deploying and testing blocks",permalink:"/docs/bylding_backends/deploying_and_testing_blocks"},next:{title:"Working with edges",permalink:"/docs/bylding_backends/working_with_edges"}},l=[{value:"Connecting a block",id:"connecting-a-block",children:[]},{value:"Synchronous Communication",id:"synchronous-communication",children:[]},{value:"Asynchronous Communication",id:"asynchronous-communication",children:[{value:"Publisher",id:"publisher",children:[]},{value:"Subscriber",id:"subscriber",children:[]}]}],s={rightToc:l};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Communication between blocks is made very simple compared to traditional backends. Synchronous requests to other blocks is a simple function call. For asynchronous requests, you can send and receive messages using the in built messaing system without any additional setup."),Object(r.b)("h2",{id:"connecting-a-block"},"Connecting a block"),Object(r.b)("p",null,"You need to connect to a block from another block to invoke all its interface methods. Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld connect [block-name]")," to enable sync communication between blocks."),Object(r.b)("h2",{id:"synchronous-communication"},"Synchronous Communication"),Object(r.b)("p",null,"Blocks could access the marked up interface methods from the another block in\na synchronous manner. In below case ",Object(r.b)("inlineCode",{parentName:"p"},"Stock")," model in ",Object(r.b)("inlineCode",{parentName:"p"},"inventory")," block exposes\n",Object(r.b)("inlineCode",{parentName:"p"},"get"),", ",Object(r.b)("inlineCode",{parentName:"p"},"update")," and ",Object(r.b)("inlineCode",{parentName:"p"},"is_available")," method."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Stock < Byld::Model\n  expose only: [:get, :update]\n\n  inf(ID) {Bool}\n  def self.is_available(product_id)\n    stock = Stock.find(product_id: id)\n    stock.qty > 0\n  end\n\nend\n")),Object(r.b)("p",null,"From order block connect to inventory block using,"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld connect inventory\n")),Object(r.b)("p",null,"After this you should be able to call all the exposed methods (",Object(r.b)("inlineCode",{parentName:"p"},":get"),", ",Object(r.b)("inlineCode",{parentName:"p"},":update"),", ",Object(r.b)("inlineCode",{parentName:"p"},":is_available"),") from Stock in order block using the Stock.client."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"Stock.client.available?(productId)\n")),Object(r.b)("h2",{id:"asynchronous-communication"},"Asynchronous Communication"),Object(r.b)("p",null,"Mark any model as publisher using the ",Object(r.b)("inlineCode",{parentName:"p"},"publisher on: [channel_name]")," markup.\nBy default model\u2019s creation, update and deletion events are published when the\nmodel is marked. Use ",Object(r.b)("inlineCode",{parentName:"p"},"publish(:event_name, model)"),"  to publish custom events\non the channel."),Object(r.b)("h3",{id:"publisher"},"Publisher"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"publish(:event_name)")," to send a message to multiples blocks using our\nmessaging system. By default, ",Object(r.b)("inlineCode",{parentName:"p"},":order_created"),", ",Object(r.b)("inlineCode",{parentName:"p"},":order_updated")," and\n",Object(r.b)("inlineCode",{parentName:"p"},":order_destroyed")," events will be published when you add ",Object(r.b)("inlineCode",{parentName:"p"},"publisher on: :[model]_events")," to your model."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Order < Byld::Model\n  publisher on: :order_events\n\n  def place!\n    ...\n    publish(:order_placed)\n  end\nend\n")),Object(r.b)("h3",{id:"subscriber"},"Subscriber"),Object(r.b)("p",null,"Use the ",Object(r.b)("inlineCode",{parentName:"p"},"subscriber")," markup and name the method this way ",Object(r.b)("inlineCode",{parentName:"p"},"handle_[channel_name]"),"\nto subscribe events from a particular channel. Event object passed to the\nsubscriber method contains ",Object(r.b)("inlineCode",{parentName:"p"},"type")," and ",Object(r.b)("inlineCode",{parentName:"p"},"source_id")," of the model publishing it."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Stock < Byld::Model\n  ...\n\n  subscriber\n  def self.handle_order_events(event)\n    case event.type\n    when :order_placed\n      order = Order.client.get(event.source_id)\n      order.lineitem.each |item|\n         stock = Stock.find(product_id: item.product_id)\n         stock.quantity -= item.quantity\n         stock.save\n      end\n    ...\n  end\nend\n")))}b.isMDXComponent=!0},183:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),b=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=b(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=b(t),p=o,m=d["".concat(c,".").concat(p)]||d[p]||u[p]||r;return t?a.a.createElement(m,i(i({ref:n},s),{},{components:t})):a.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,c=new Array(r);c[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<r;s++)c[s]=t[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);