(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{111:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var o=n(2),a=n(6),r=(n(0),n(141)),i={id:"architecte_with_blocks",title:"Architect with blocks",sidebar_label:"Architect with blocks"},c={id:"bylding_backends/architecte_with_blocks",isDocsHomePage:!1,title:"Architect with blocks",description:"Project",source:"@site/docs/bylding_backends/architecting_with_blocks.md",permalink:"/docs/bylding_backends/architecte_with_blocks",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/bylding_backends/architecting_with_blocks.md",sidebar_label:"Architect with blocks",sidebar:"someSidebar",previous:{title:"What's Byld?",permalink:"/docs/getting_started/intro"},next:{title:"Communicating between blocks",permalink:"/docs/bylding_backends/communicating_between_blocks"}},l=[{value:"Project",id:"project",children:[]},{value:"Blocks",id:"blocks",children:[{value:"Structure of a block",id:"structure-of-a-block",children:[]},{value:"Models",id:"models",children:[]}]},{value:"Deploying a block",id:"deploying-a-block",children:[]},{value:"Testing a block",id:"testing-a-block",children:[{value:"Using interactive console",id:"using-interactive-console",children:[]},{value:"Viewing logs",id:"viewing-logs",children:[]}]}],s={rightToc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"project"},"Project"),Object(r.b)("p",null,"Project is a collection of your blocks and a gate. Blocks are individual units\nof abstraction in your business. Gate is a GraphQL based gateway to expose all\nthe blocks to your frontends."),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld new [project-name]")," to create a new project."),Object(r.b)("p",null,"In case of simplified amazon, project would have the following blocks:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"amazon/\n\u251c\u2500\u2500 identity/\n\u2514\u2500\u2500 orders/\n\u2514\u2500\u2500 payments/\n\u2514\u2500\u2500 communication/\n\u2514\u2500\u2500 inventory/\n\u2514\u2500\u2500 catalog/\n\u2514\u2500\u2500 shipping/\n\u2514\u2500\u2500 gate/\n")),Object(r.b)("h2",{id:"blocks"},"Blocks"),Object(r.b)("p",null,"Block is an individual unit of abstraction in your business. Compared to\ntraditional backends, block eliminates all the boilerplate code for transport,\nrouting and persistence. In blocks, you need only models to organize your\nbusiness logic."),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld block new [block-name]")," to create a new block."),Object(r.b)("h3",{id:"structure-of-a-block"},"Structure of a block"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"identity/\n\u251c\u2500\u2500 Gemfile\n\u2514\u2500\u2500 models/\n    \u2514\u2500\u2500 user.rb\n    \u2514\u2500\u2500 contact_info.rb\n")),Object(r.b)("h3",{id:"models"},"Models"),Object(r.b)("p",null,"Model is place to implement your business logic. Methods defined in models\ncan be exposed to other blocks and frontends . Model by default has\n",Object(r.b)("inlineCode",{parentName:"p"},"get"),", ",Object(r.b)("inlineCode",{parentName:"p"},"create"),", ",Object(r.b)("inlineCode",{parentName:"p"},"update"),", ",Object(r.b)("inlineCode",{parentName:"p"},"delete")," and ",Object(r.b)("inlineCode",{parentName:"p"},"list")," interface methods. You can\nalso add additional methods and control what needs to be exposed using ",Object(r.b)("inlineCode",{parentName:"p"},"inf")," markup."),Object(r.b)("h4",{id:"interface-markup"},"Interface Markup"),Object(r.b)("p",null,"You could add additional interface methods using ",Object(r.b)("inlineCode",{parentName:"p"},"inf(RequestType) {ReturnType}"),"\nover it. Supported request and return types are: ",Object(r.b)("inlineCode",{parentName:"p"},"ID"),", ",Object(r.b)("del",{parentName:"p"},"String"),",\n",Object(r.b)("del",{parentName:"p"},"Integer"),", ",Object(r.b)("del",{parentName:"p"},"Float"),", ",Object(r.b)("del",{parentName:"p"},"Bool"),", ",Object(r.b)("inlineCode",{parentName:"p"},"Byld::Messages")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Byld::Model"),"."),Object(r.b)("p",null,"Model's interface methods are wrapped in a ",Object(r.b)("inlineCode",{parentName:"p"},"[Model]Service")," object which can be\nused from other blocks and gates to invoke them."),Object(r.b)("p",null,"Also, ",Object(r.b)("inlineCode",{parentName:"p"},"Byld::Model")," is an extension of active record, so all of its methods\nare available to use on it."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class User < Byld::Model\n  expose only: [:get, :create, :update, :delete, :list]\n\n  inf(ID) {User}\n  def self.activate(id)\n    user = User.find(id)\n    user.active = true\n    user.save!\n  end\nend\n")),Object(r.b)("p",null,"Use the ",Object(r.b)("inlineCode",{parentName:"p"},"byld block g:model [model-name]")," to generate a model. It creates two\nfiles the actual model and the db migration needed for the new model."),Object(r.b)("h4",{id:"migration"},"Migration"),Object(r.b)("p",null,"Migration files are used create the schema for the models. You can define the\nnecessary fields for the model and add further migrations to add/ remove\nfields, create primary keys, indexes etc.."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class CreateUsers < ActiveRecord::Migration[5.2]\n  def change\n    create_table :users do |t|\n      t.string :first_name\n      t.string :last_name\n      t.string :email\n    end\n  end\nend\n")),Object(r.b)("h2",{id:"deploying-a-block"},"Deploying a block"),Object(r.b)("p",null,"Blocks eliminates all the infrasturcture related code needed to deploy your\nblock and database. Your migration scripts will be run automatically before\ndeployment."),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld deploy")," from the block directory to deploy it. And check the status\nof the deployment using ",Object(r.b)("inlineCode",{parentName:"p"},"byld status")," command."),Object(r.b)("h2",{id:"testing-a-block"},"Testing a block"),Object(r.b)("p",null,"After deploying, you can test/ debug your blocks from your local command line."),Object(r.b)("h3",{id:"using-interactive-console"},"Using interactive console"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld console")," to connect to your block's console. All the models are\nloaded for testing."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"req = CreateUserReq.new(first_name: 'foo', last_name: 'bar')\nuser = UserService.client.create(req)\nUserService.client.activate(user.id)\n")),Object(r.b)("h3",{id:"viewing-logs"},"Viewing logs"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld logs")," to view your block's logs in your command line."))}b.isMDXComponent=!0},141:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=b(n),u=o,m=d["".concat(i,".").concat(u)]||d[u]||p[u]||r;return n?a.a.createElement(m,c(c({ref:t},s),{},{components:n})):a.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);