(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{137:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return r}));var o=n(2),a=(n(0),n(143));const l={id:"todo_app",title:"Let's build a backend for a todo app",sidebar_label:"Let's build a backend for a todo app"},c={id:"bylding_backends/todo_app",title:"Let's build a backend for a todo app",description:"This tutorial will help you build and deploy a backend for a todo app. For this you",source:"@site/docs/bylding_backends/todo_app.md",permalink:"/docs/bylding_backends/todo_app",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/bylding_backends/todo_app.md",sidebar_label:"Let's build a backend for a todo app",sidebar:"someSidebar",previous:{title:"Messages and Services",permalink:"/docs/bylding_backends/custom"},next:{title:"CLI Command",permalink:"/docs/references/cli"}},d=[{value:"Login",id:"login",children:[]},{value:"Create todoist project",id:"create-todoist-project",children:[]},{value:"Create identity block",id:"create-identity-block",children:[{value:"Create user model",id:"create-user-model",children:[]},{value:"Deploy identity block",id:"deploy-identity-block",children:[]},{value:"Test and debug your block",id:"test-and-debug-your-block",children:[]}]},{value:"Create todos block",id:"create-todos-block",children:[{value:"Create todo item model",id:"create-todo-item-model",children:[]},{value:"Deploy todos block",id:"deploy-todos-block",children:[]}]},{value:"Create notifications block",id:"create-notifications-block",children:[{value:"Create communication model",id:"create-communication-model",children:[]},{value:"Deploy notifications block",id:"deploy-notifications-block",children:[]},{value:"Test and debug your block",id:"test-and-debug-your-block-1",children:[]}]},{value:"Expose identity and todos blocks",id:"expose-identity-and-todos-blocks",children:[{value:"Deploy gate",id:"deploy-gate",children:[]},{value:"Querying the gate",id:"querying-the-gate",children:[]}]}],i={rightToc:d};function r({components:e,...t}){return Object(a.b)("wrapper",Object(o.a)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This tutorial will help you build and deploy a backend for a todo app. For this you\nwill create a project with three blocks and one gate to expose them."),Object(a.b)("h4",{id:"blocks"},"Blocks"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Identity"),Object(a.b)("li",{parentName:"ol"},"Todos"),Object(a.b)("li",{parentName:"ol"},"Notifications")),Object(a.b)("h2",{id:"login"},"Login"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"byld login")," to authenicate. If you don't have a token yet it. ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://forms.gle/2VGp3jgdndogwM939"}),"Request your token"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld login\n\nYour email: someone@example.com\nYour token: xxxxx\n")),Object(a.b)("p",null,"You\u2019re all set for building your first project."),Object(a.b)("h2",{id:"create-todoist-project"},"Create todoist project"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld new todoist\n")),Object(a.b)("p",null,"Now there is a new directory created with the name ",Object(a.b)("inlineCode",{parentName:"p"},"todoist/"),". Switch\ninto the newly created directory."),Object(a.b)("h2",{id:"create-identity-block"},"Create identity block"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block new identity\n")),Object(a.b)("p",null,"Switch into the newly created ",Object(a.b)("inlineCode",{parentName:"p"},"identity/")," directory."),Object(a.b)("h3",{id:"create-user-model"},"Create user model"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block g:model user\n")),Object(a.b)("p",null,"It creates two files, the actual model and the db changes needed for the new\nmodel."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class User < Byld::Model\n  expose only: [:get, :create, :update, :delete, :list]\nend\n")),Object(a.b)("p",null,"Let's add first_name  and last_name fields for User in the migration file."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class CreateUsers < ActiveRecord::Migration[5.2]\n  def change\n    create_table :users do |t|\n      t.string :first_name\n      t.string :last_name\n      t.string :email\n    end\n  end\nend\n")),Object(a.b)("h3",{id:"deploy-identity-block"},"Deploy identity block"),Object(a.b)("p",null,"Now, let us deploy the identity block and check its status."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld deploy\n\ud83e\udd1e Deploying order...\n\ud83d\udc4c Deployment triggered!\n\n$ byld status\n\ntodoist\n\nblocks\n\n+----------+----------+\n| name     | status   |\n+----------+----------+\n| identity | running  |\n+----------+----------+\n\n")),Object(a.b)("h3",{id:"test-and-debug-your-block"},"Test and debug your block"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"byld console")," and ",Object(a.b)("inlineCode",{parentName:"p"},"byld logs")," commands come in handy to test and debug the\nblock after deploying."),Object(a.b)("h2",{id:"create-todos-block"},"Create todos block"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block new todos\n")),Object(a.b)("p",null,"Switch into the newly created ",Object(a.b)("inlineCode",{parentName:"p"},"todos/")," directory."),Object(a.b)("h3",{id:"create-todo-item-model"},"Create todo item model"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block g:model todo_item\n")),Object(a.b)("p",null,"It creates two files, the actual model and the db changes needed for the new\nmodel. Let's add ",Object(a.b)("inlineCode",{parentName:"p"},"publisher on: :todo_item_events")," to the model. This will publish ",Object(a.b)("inlineCode",{parentName:"p"},":todo_item_created"),", ",Object(a.b)("inlineCode",{parentName:"p"},":todo_item_updated")," and ",Object(a.b)("inlineCode",{parentName:"p"},":todo_item_destroyed")," events to other blocks. Later, you will use ",Object(a.b)("inlineCode",{parentName:"p"},":todo_item_created")," event to send emails to the assigned user."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class TodoItem < Byld::Model\n  expose only: [:get, :create, :update, :delete, :list]\n  publisher on: :todo_item_events\nend\n")),Object(a.b)("p",null,"Let's add title, description and status fields for TodoItem in the migration\nfile."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class CreateTodoItems < ActiveRecord::Migration[5.2]\n  def change\n    create_table :todo_items do |t|\n      t.string :title\n      t.string :description\n      t.boolean :status\n      t.integer :assignee_id\n      t.datetime :completed_at\n      t.timestamps\n    end\n  end\nend\n")),Object(a.b)("h3",{id:"deploy-todos-block"},"Deploy todos block"),Object(a.b)("p",null,"Now, let us deploy the todos block and check its status."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld deploy\n\ud83e\udd1e Deploying order...\n\ud83d\udc4c Deployment triggered!\n\n$ byld status\n\ntodoist\n\nblocks\n\n+----------+----------+\n| name     | status   |\n+----------+----------+\n| identity | running  |\n| todos    | running  |\n+----------+----------+\n\n")),Object(a.b)("h2",{id:"create-notifications-block"},"Create notifications block"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block new notifications\n")),Object(a.b)("p",null,"Switch into the newly created ",Object(a.b)("inlineCode",{parentName:"p"},"notifications/")," directory."),Object(a.b)("h3",{id:"create-communication-model"},"Create communication model"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block g:model communication\n")),Object(a.b)("p",null,"It creates two files, the actual model and the db changes needed for the new\nmodel."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Communication < Byld::Model\n  expose only: [:get, :create]\nend\n")),Object(a.b)("p",null,"Let's add fields to communications in the migration file."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class CreateCommunications < ActiveRecord::Migration[5.2]\n  def change\n    create_table :communications do |t|\n      t.integer :type\n      t.integer :from_id\n      t.integer :to_id\n      t.string :body\n      t.string :status\n      t.timestamps\n    end\n  end\nend\n")),Object(a.b)("p",null,"Now, let's subscribe to ",Object(a.b)("inlineCode",{parentName:"p"},":todo_item_created")," event to send emails to the\nassigned user. For this,  we need to connect notifications with todos block\nto fetch todos for sending emails. Use ",Object(a.b)("inlineCode",{parentName:"p"},"byld connect [block]")," to do that."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld connect todos\n")),Object(a.b)("p",null,"Now, let's implement the handler to process ",Object(a.b)("inlineCode",{parentName:"p"},":todo_item_created")," event."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ruby"}),"class Communication < Byld::Model\n  include Todos\n  expose only: [:get, :create, :update, :delete, :list]\n\n  subscriber\n  def self.handle_todo_item_events(event)\n    case event.type\n    when :todo_item_created\n      log.info 'Sending email...'\n\n      todo_item = TodoItem.client.get(event.source_id)\n      communication = Communication.create!(type: 'EMAIL', to_id: todo_item.assignee_id, from_id: 'no-reply@todoist.com', body: 'New todo assigned to you')\n      communication.send!\n  end\n\n  def send!\n   # insert code to send emails\n  end\nend\n")),Object(a.b)("h3",{id:"deploy-notifications-block"},"Deploy notifications block"),Object(a.b)("p",null,"Now, let us deploy the notifications block and check its status."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld deploy\n\ud83e\udd1e Deploying order...\n\ud83d\udc4c Deployment triggered!\n\n$ byld status\n\ntodoist\n\nblocks\n\n+---------------+----------+\n| name          | status   |\n+---------------+----------+\n| identity      | running  |\n| todos         | running  |\n| notifications | running  |\n+---------------+----------+\n\n")),Object(a.b)("h3",{id:"test-and-debug-your-block-1"},"Test and debug your block"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"byld console")," and ",Object(a.b)("inlineCode",{parentName:"p"},"byld logs")," commands come in handy to test and debug the\nblock after deploying."),Object(a.b)("h2",{id:"expose-identity-and-todos-blocks"},"Expose identity and todos blocks"),Object(a.b)("p",null,"From the ",Object(a.b)("inlineCode",{parentName:"p"},"todoist/")," directory, run to create a gate for your project."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld gate new\n")),Object(a.b)("p",null,"Now there is a new directory created with the name ",Object(a.b)("inlineCode",{parentName:"p"},"gate/"),". Switch into the\nnewly created directory."),Object(a.b)("p",null,"Now, expose identity and todos block using,"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld gate expose identity\n")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld gate expose todos\n")),Object(a.b)("h3",{id:"deploy-gate"},"Deploy gate"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"byld deploy")," to deploy the gate. This exposes all the blocks to the\nfrontends via GraphQL endpoints."),Object(a.b)("p",null,"When the block changes, you need to expose the block and deploy the gate again."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld deploy\n")),Object(a.b)("h3",{id:"querying-the-gate"},"Querying the gate"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"byld status")," to see the status of the gate and blocks."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"$ byld status\n\n+----------------------------------------+---------------------------------------+\n| status  | url                          | docs                                  |\n+----------------------------------------+---------------------------------------+\n| running | todoist.letsbyld.com         | todoist.letsbyld.com/graphiql         |\n+---------+------------------------------+---------------------------------------+\n\nblocks\n\n+---------------+------------+\n| name          | status     |\n+---------------+------------+\n| identity      | running    |\n| todos         | running    |\n| notifications | running    |\n+---------------+------------+\n")),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"todoist.letsbyld.com/graphiql")," url to view docs and test out your endpoints. You can use ",Object(a.b)("inlineCode",{parentName:"p"},"todoist.letsbyld.com")," url to power your UI across different platforms."))}r.isMDXComponent=!0},143:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r=a.a.createContext({}),b=function(e){var t=a.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):d({},t,{},e)),n},s=function(e){var t=b(e.components);return a.a.createElement(r.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,r=i(e,["components","mdxType","originalType","parentName"]),s=b(n),u=o,m=s["".concat(c,".").concat(u)]||s[u]||p[u]||l;return n?a.a.createElement(m,d({ref:t},r,{components:n})):a.a.createElement(m,d({ref:t},r))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,c=new Array(l);c[0]=u;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:o,c[1]=d;for(var r=2;r<l;r++)c[r]=n[r];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);