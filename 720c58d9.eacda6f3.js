(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{159:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return i}));var a=n(2),r=(n(0),n(180));const c={id:"quick_start",title:"Quick Start",sidebar_label:"Quick Start"},o={id:"getting_started/quick_start",isDocsHomePage:!1,title:"Quick Start",description:"Get a quick walkthrough of Byld and how it works.",source:"@site/docs/getting_started/quick_start.md",permalink:"/docs/getting_started/quick_start",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/getting_started/quick_start.md",sidebar_label:"Quick Start",sidebar:"someSidebar",previous:{title:"What's Byld?",permalink:"/docs/getting_started/intro"},next:{title:"FAQs",permalink:"/docs/getting_started/faq"}},l=[{value:"Setup",id:"setup",children:[]},{value:"Creating projects",id:"creating-projects",children:[]},{value:"Creating blocks",id:"creating-blocks",children:[]},{value:"Testing and debugging your blocks",id:"testing-and-debugging-your-blocks",children:[]},{value:"Communicating between blocks",id:"communicating-between-blocks",children:[]},{value:"Exposing blocks",id:"exposing-blocks",children:[]}],b={rightToc:l};function i({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},b,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Get a quick walkthrough of Byld and how it works."),Object(r.b)("h3",{id:"setup"},"Setup"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ gem install byld-cli\n")),Object(r.b)("p",null,"You need to have a Ruby with v2.6 or higher. We recommend using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://rvm.io/rvm/install"}),"RVM")," for installing it."),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld login")," to login. If you don't have a token yet, get it ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://letsbyld.com/signup"}),"here"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld login\n\nYour email: someone@example.com\nYour token: xxxxx\n")),Object(r.b)("p",null,"You\u2019re all set for building your first project."),Object(r.b)("h3",{id:"creating-projects"},"Creating projects"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld new [project-name]")," to create a project."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld new amazon\n")),Object(r.b)("p",null,"Now there is a new directory created with the name ",Object(r.b)("inlineCode",{parentName:"p"},"amazon/"),". Switch into the newly created directory."),Object(r.b)("h3",{id:"creating-blocks"},"Creating blocks"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld block new [block-name]")," to create a block."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block new identity\n")),Object(r.b)("p",null,"Switch into the newly created ",Object(r.b)("inlineCode",{parentName:"p"},"identity/")," directory."),Object(r.b)("h4",{id:"creating-models"},"Creating models"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld block g:model user\n")),Object(r.b)("p",null,"It creates two files, the actual model and the database changes/migrations needed for the new model. "),Object(r.b)("p",null,"In the model, markup the methods the needs to be accessed from other blocks or gate using ",Object(r.b)("inlineCode",{parentName:"p"},"inf(RequestType) {ResponseType}"),". "),Object(r.b)("p",null,"By default the ",Object(r.b)("inlineCode",{parentName:"p"},":get"),", ",Object(r.b)("inlineCode",{parentName:"p"},":create"),", ",Object(r.b)("inlineCode",{parentName:"p"},":update"),", ",Object(r.b)("inlineCode",{parentName:"p"},":delete")," and ",Object(r.b)("inlineCode",{parentName:"p"},":list")," methods of the model are exposed."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"class User < Byld::Model\n  enable only: [:get, :create]\n\n  inf(ID) {Bool}\n  def self.activate!(id)\n    user = User.find(id)\n    user.active = true\n    user.save!\n  end\n\nend\n")),Object(r.b)("p",null,"Let's add first_name, last_name, :email fields for User model in the migration file."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"class CreateUsers < ActiveRecord::Migration[5.2]\n  def change\n    create_table :users do |t|\n      t.string :first_name\n      t.string :last_name\n      t.string :email\n      t.bool :active\n    end\n  end\nend\n")),Object(r.b)("h4",{id:"deploying-blocks"},"Deploying blocks"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld deploy")," command from the block directory to deploy the block."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld deploy\n\ud83e\udd1e Deploying order...\n\ud83d\udc4c Deployment triggered!\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld status\n\namazon\n\nblocks\n\n+----------+----------+\n| name     | status   |\n+----------+----------+\n| identity | running  |\n+----------+----------+\n")),Object(r.b)("h3",{id:"testing-and-debugging-your-blocks"},"Testing and debugging your blocks"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"byld console")," and ",Object(r.b)("inlineCode",{parentName:"p"},"byld logs")," commands come in handy to test and debug the block after deploying."),Object(r.b)("h3",{id:"communicating-between-blocks"},"Communicating between blocks"),Object(r.b)("h4",{id:"sync-communication"},"Sync communication"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld connect [block-name]")," to establish communication across blocks. After this you should be able access the marked up from the connected block this way ",Object(r.b)("inlineCode",{parentName:"p"},"User.client.active?('abcd1234')"),"."),Object(r.b)("h4",{id:"async-communication"},"Async communication"),Object(r.b)("p",null,"Use the publisher markup to emit events from a model. By default create, update and delete events are published."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"class Order < Byld::Model\n  publisher on: :order_events\n\n  def place!\n    ...\n    publish(:order_placed)\n  end\nend\n")),Object(r.b)("p",null,"Use the subscriber markup the method to subscribe events from the publisher model. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"class Stock < Byld::Model\n  ...\n\n  subscriber\n  def self.handle_order_events(event)\n    case event.type\n    when :order_placed\n      order = Order.client.get(event.source_id)\n      order.lineitems.each |item|\n         stock = Stock.find(product_id: item.product_id)\n         stock.quantity -= item.quantity\n         stock.save!\n      end\n    ...\n  end\nend\n")),Object(r.b)("h3",{id:"exposing-blocks"},"Exposing blocks"),Object(r.b)("p",null,"From the project directory, use ",Object(r.b)("inlineCode",{parentName:"p"},"byld gate new")," to create the gate to expose your blocks."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld gate new\n")),Object(r.b)("p",null,"Switch into the newly created directory called ",Object(r.b)("inlineCode",{parentName:"p"},"gate/"),"."),Object(r.b)("p",null,"Now, use the ",Object(r.b)("inlineCode",{parentName:"p"},"byld expose [block-name]")," to auto create the edge to expose your block."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld gate expose identity\n")),Object(r.b)("h4",{id:"deploying-the-gate"},"Deploying the gate"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld deploy")," to deploy the gate. This exposes all the blocks to the frontends via GraphQL endpoints."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld deploy\n")),Object(r.b)("h4",{id:"querying-the-gate"},"Querying the gate"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"byld status")," to see the status of the gate and blocks."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"$ byld status\n\nblocks\n\n+---------------+------------+\n| name          | status     |\n+---------------+------------+\n| identity      | running    |\n| order         | running    |\n| comms         | running    |\n+---------------+------------+\n")),Object(r.b)("p",null,"Use the ",Object(r.b)("inlineCode",{parentName:"p"},"amazon.letsbyld.com/graphiql")," url to view docs and test out your endpoints. "),Object(r.b)("p",null,"And use the ",Object(r.b)("inlineCode",{parentName:"p"},"amazon.letsbyld.com")," url to power your UI across different platforms."))}i.isMDXComponent=!0},180:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),s=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,m=d["".concat(o,".").concat(u)]||d[u]||p[u]||c;return n?r.a.createElement(m,l(l({ref:t},i),{},{components:n})):r.a.createElement(m,l({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=u;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<c;i++)o[i]=n[i];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);