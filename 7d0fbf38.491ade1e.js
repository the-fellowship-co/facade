(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{125:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return p}));var r=n(2),c=n(6),a=(n(0),n(141)),o={id:"custom",title:"Custom components",sidebar_label:"Custom types, services and edges"},s={id:"bylding_backends/custom",isDocsHomePage:!1,title:"Custom components",description:"Create custom types",source:"@site/docs/bylding_backends/custom.md",permalink:"/docs/bylding_backends/custom",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/bylding_backends/custom.md",sidebar_label:"Custom types, services and edges",sidebar:"someSidebar",previous:{title:"Expose your blocks",permalink:"/docs/bylding_backends/expose_your_blocks"},next:{title:"Let's build a backend for a todo app",permalink:"/docs/bylding_backends/todo_app"}},i=[{value:"Create custom types",id:"create-custom-types",children:[]},{value:"Create custom services",id:"create-custom-services",children:[]},{value:"Create custom edges",id:"create-custom-edges",children:[]}],l={rightToc:i};function p(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"create-custom-types"},"Create custom types"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"Byld::Message")," to create a custom type. Custom types can be used as\nrequest / reponse type in your additional methods."),Object(a.b)("p",null,"Custom types will be exported across blocks with ",Object(a.b)("inlineCode",{parentName:"p"},"byld connect [block-name]"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class ReportReq < Byld::Message\n\nend\n")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class ReportResp < Byld::Message\n\nend\n")),Object(a.b)("h2",{id:"create-custom-services"},"Create custom services"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"Byld::Service")," to create a custom service. All models and custom types\ncan be used in custom services."),Object(a.b)("p",null,"Custom services will be exported across blocks with\n",Object(a.b)("inlineCode",{parentName:"p"},"byld connect [block-name]"),". You can also expose custom services to frontends\nin gates with ",Object(a.b)("inlineCode",{parentName:"p"},"byld gate expose [block-name]"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class ReportService < Byld::Service\n\nend\n")),Object(a.b)("h2",{id:"create-custom-edges"},"Create custom edges"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"Byld::Edge")," to create a custom edge. You can use all services and types\nin the custom edges with ",Object(a.b)("inlineCode",{parentName:"p"},"byld connect [block-name]"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class ReportEdge < Byld::Edge\n\nend\n")))}p.isMDXComponent=!0},141:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),c=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var l=c.a.createContext({}),p=function(e){var t=c.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return c.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},d=c.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||a;return n?c.a.createElement(m,s(s({ref:t},l),{},{components:n})):c.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);