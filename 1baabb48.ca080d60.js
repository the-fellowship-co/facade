(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{108:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(6),c=(n(0),n(143)),o={id:"bylding_backends",title:"Bylding Backends",sidebar_label:"Bylding Backends"},l={id:"getting_started/bylding_backends",isDocsHomePage:!1,title:"Bylding Backends",description:"Architecting with blocks",source:"@site/docs/getting_started/bylding_backends.md",permalink:"/facade/docs/getting_started/bylding_backends",editUrl:"https://github.com/the-fellowship-co/facade/edit/master/docs/getting_started/bylding_backends.md",sidebar_label:"Bylding Backends",sidebar:"someSidebar",previous:{title:"What's Byld?",permalink:"/facade/docs/getting_started/intro"},next:{title:"CLI Command",permalink:"/facade/docs/references/cli"}},i=[{value:"Architecting with blocks",id:"architecting-with-blocks",children:[{value:"Create your first project",id:"create-your-first-project",children:[]},{value:"Create your first block",id:"create-your-first-block",children:[]},{value:"Structure of a block",id:"structure-of-a-block",children:[]},{value:"Create your first model",id:"create-your-first-model",children:[]},{value:"Deploy your block",id:"deploy-your-block",children:[]}]},{value:"Communicating between blocks",id:"communicating-between-blocks",children:[{value:"Synchronous Communication",id:"synchronous-communication",children:[]},{value:"Asynchronous Communication",id:"asynchronous-communication",children:[]}]},{value:"Expose it to frontends",id:"expose-it-to-frontends",children:[{value:"Create your gate",id:"create-your-gate",children:[]},{value:"Expose your blocks",id:"expose-your-blocks",children:[]},{value:"Structure of a gate",id:"structure-of-a-gate",children:[]},{value:"Joining blocks",id:"joining-blocks",children:[]},{value:"Deploy your gate",id:"deploy-your-gate",children:[]},{value:"Querying the gate",id:"querying-the-gate",children:[]}]}],b={rightToc:i};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"architecting-with-blocks"},"Architecting with blocks"),Object(c.b)("h3",{id:"create-your-first-project"},"Create your first project"),Object(c.b)("p",null,"Let's try to create a barebones versions of amazon.com's backend with byld. Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld new [project-name]")," to create a new project. "),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld new amazon\n")),Object(c.b)("p",null,"Now there is a new directory created with the name ",Object(c.b)("inlineCode",{parentName:"p"},"amazon/"),". Switch into the newly created directory."),Object(c.b)("h3",{id:"create-your-first-block"},"Create your first block"),Object(c.b)("p",null,"Block are fundamental units of abstractions of your business/organizations. Lets start with identity block which abstracts users, roles and groups. "),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld block new [block-name]")," to create a new block."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld b new identity\n")),Object(c.b)("h3",{id:"structure-of-a-block"},"Structure of a block"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"identity/\n\u251c\u2500\u2500 Gemfile\n\u2514\u2500\u2500 models/\n")),Object(c.b)("h3",{id:"create-your-first-model"},"Create your first model"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"byld b g:model [model-name]")," to create a model."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld b g:model users\n")),Object(c.b)("p",null,"It creates two files the actual model and the db migration for the model."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class User < ActiveRecord::Base\n  expose only: [:get, :create, :update, :delete, :list]\nend\n")),Object(c.b)("p",null,"The model by default has ",Object(c.b)("inlineCode",{parentName:"p"},"get"),", ",Object(c.b)("inlineCode",{parentName:"p"},"create"),", ",Object(c.b)("inlineCode",{parentName:"p"},"update"),", ",Object(c.b)("inlineCode",{parentName:"p"},"delete")," and ",Object(c.b)("inlineCode",{parentName:"p"},"list"),"\nimplemented. You could add additional methods using this interface markup\n",Object(c.b)("inlineCode",{parentName:"p"},"inf(RequestType) {ReturnType}")," over it."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class User < ActiveRecord::Base\n  expose only: [:get, :create, :update, :delete, :list]\n\n  inf(ID) {User}\n  def self.activate(id)\n    user = User.find(id)\n    user.enable!\n  end\nend\n")),Object(c.b)("p",null,"Use the migration file to fill the necessary fields for the model."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class CreateUsers < ActiveRecord::Migration[5.2]\n  def change\n    create_table :users do |t|\n      t.string :first_name\n      t.string :last_name\n      t.string :email\n    end\n  end\nend\n")),Object(c.b)("p",null,"That\u2019s pretty much it. You\u2019re all set up to deploy your first block."),Object(c.b)("h3",{id:"deploy-your-block"},"Deploy your block"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld deploy")," from the block directory to deploy it. Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld console")," and ",Object(c.b)("inlineCode",{parentName:"p"},"byld logs")," commands to test and debug the block after deploying."),Object(c.b)("p",null,"Similarily other blocks could be created this way."),Object(c.b)("h2",{id:"communicating-between-blocks"},"Communicating between blocks"),Object(c.b)("h3",{id:"synchronous-communication"},"Synchronous Communication"),Object(c.b)("p",null,"Blocks could access the marked up interface methods from the another block in a synchronous manner. In below case ",Object(c.b)("inlineCode",{parentName:"p"},"Stock")," model in ",Object(c.b)("inlineCode",{parentName:"p"},"inventory")," block exposes a bunch of methods."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"\nclass Stock < ActiveRecord::Base\n  expose only: [:get, :update]\n\n  inf(ID) {Bool}\n  def self.available?(product_id)\n    stock = Stock.find(product_id: id)\n    stock.qty > 0\n  end\n\nend\n")),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld connect [block-name]")," to enable sync communication between blocks."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld connect inventory\n")),Object(c.b)("p",null,"After this you should be able to call all the exposed methods (",Object(c.b)("inlineCode",{parentName:"p"},":get"),", ",Object(c.b)("inlineCode",{parentName:"p"},":update"),", ",Object(c.b)("inlineCode",{parentName:"p"},":available?"),") from ",Object(c.b)("inlineCode",{parentName:"p"},"Stock")," in another block using the ",Object(c.b)("inlineCode",{parentName:"p"},"[Model]Service.client"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"StockService.client.available?(productId)\n")),Object(c.b)("h3",{id:"asynchronous-communication"},"Asynchronous Communication"),Object(c.b)("p",null,"Mark any model as publisher using the ",Object(c.b)("inlineCode",{parentName:"p"},"publisher on: [channel_name]")," markup.\nBy default model\u2019s creation, update and deletion events are published when the\nmodel is marked. Use ",Object(c.b)("inlineCode",{parentName:"p"},"publish(:event_name, model)"),"  to publish custom events\non the channel."),Object(c.b)("h4",{id:"publisher"},"Publisher"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"publish(:event_name)")," to send a message to multiples blocks using our\npub/sub system."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class Order < ActiveRecord::Base\n  publisher on: order_events\n\n  def place!\n    ...\n    publish(:order_placed)\n  end\nend\n")),Object(c.b)("h4",{id:"subscriber"},"Subscriber"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"subscriber")," markup and name the method this way ",Object(c.b)("inlineCode",{parentName:"p"},"handle_[channel_name]"),"\nto subscribe events from a particular channel. Event object passed to the\nsubscriber method contains ",Object(c.b)("inlineCode",{parentName:"p"},"type")," and ",Object(c.b)("inlineCode",{parentName:"p"},"source_id")," of the model publishing it."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class Stock < ActiveRecord::Base\n  ...\n\n  subscriber\n  def self.handle_order_events(event)\n    case event.type\n    when :order_placed\n      order = OrderService.client.get(event.source_id)\n      order.lineitem.each |item|\n         stock = Stock.find(product_id: item.product_id)\n         stock.quantity -= item.quantity\n         stock.save\n      end\n    ...\n  end\nend\n")),Object(c.b)("h2",{id:"expose-it-to-frontends"},"Expose it to frontends"),Object(c.b)("p",null,"Finally, all blocks could be made available to the frontend via gate."),Object(c.b)("h3",{id:"create-your-gate"},"Create your gate"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld gate new")," to create a gate for the project."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld gate new\n")),Object(c.b)("p",null,"Now there is a new directory created with the name ",Object(c.b)("inlineCode",{parentName:"p"},"gate"),". Switch into to the newly created directory."),Object(c.b)("h3",{id:"expose-your-blocks"},"Expose your blocks"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld gate expose [block-name]")," to generate an edge to the frontend."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld gate expose order\n")),Object(c.b)("h3",{id:"structure-of-a-gate"},"Structure of a gate"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"gate/\n\u251c\u2500\u2500 Gemfile\n\u2514\u2500\u2500 edges\n    \u2514\u2500\u2500 identity_edge.rb\n    \u2514\u2500\u2500 inventory_edge.rb\n    \u2514\u2500\u2500 order_edge.rb\n    \u2514\u2500\u2500 payment_edge.rb\n    \u2514\u2500\u2500 communication_edge.rb\n")),Object(c.b)("p",null,"You could add additional methods using this interface markup ",Object(c.b)("inlineCode",{parentName:"p"},"inf(RequestType) {ReturnType}")," over it."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class OrderEdge < Byld::Edge\n  include Orders\n\n  inf(ID) {Order}\n  def get_order(id)\n    OrderService.client.get(id)\n  end\n\n  inf(CreateOrderReq) {Order}\n  def create_order!(req)\n    OrderService.client.create!(req)\n  end\n\n  inf(UpdateOrderReq) {Order}\n  def update_order!(req)\n    OrderService.client.update!(req)\n  end\n\n  inf(ID) {Order}\n  def delete_order!(id)\n    OrderService.client.delete!(id)\n  end\nend\n")),Object(c.b)("h3",{id:"joining-blocks"},"Joining blocks"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class OrderEdge < Byld::Edge\n\n  join User\n  def customer(order)\n    UserService.client.get(order.user_id)\n  end\n\nend\n")),Object(c.b)("h3",{id:"deploy-your-gate"},"Deploy your gate"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld deploy")," to deploy the gate. This exposes all the blocks to the frontends via GraphQL endpoints."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld deploy\n")),Object(c.b)("h3",{id:"querying-the-gate"},"Querying the gate"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"byld status")," to see the status of the gate and blocks."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"$ byld status\n")),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"/graphiql")," endpoint to interact with the endpoints in browser."),Object(c.b)("p",null,"You can use the",Object(c.b)("inlineCode",{parentName:"p"},"/graphql")," endpoint to power your UI across different platforms."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  getOrder(id: "z3dsbjn3223") {\n    id\n    totalPrice\n    lineItems {\n      id\n      qty\n      unitPrice\n      totalPrice\n      product {\n        id\n        title\n      }\n      customer {\n        firstName\n        lastName\n        address {\n          street\n          city\n          state\n        }\n      }\n    }\n  }\n}\n')))}d.isMDXComponent=!0},143:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),d=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),s=d(n),p=r,m=s["".concat(o,".").concat(p)]||s[p]||u[p]||c;return n?a.a.createElement(m,l(l({ref:t},b),{},{components:n})):a.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var b=2;b<c;b++)o[b]=n[b];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);